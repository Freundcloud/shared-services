# Use ADMIN credentials
provider "kubernetes" {
  load_config_file       = "false"
  host                   = azurerm_kubernetes_cluster.aks.kube_admin_config.0.host
  username               = azurerm_kubernetes_cluster.aks.kube_admin_config.0.username
  password               = azurerm_kubernetes_cluster.aks.kube_admin_config.0.password
  client_certificate     = base64decode(azurerm_kubernetes_cluster.aks.kube_admin_config.0.client_certificate)
  client_key             = base64decode(azurerm_kubernetes_cluster.aks.kube_admin_config.0.client_key)
  cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.aks.kube_admin_config.0.cluster_ca_certificate)
}

# AAD K8s cluster admin group / AAD

resource "azuread_group" "aks-aad-clusteradmins" {
  name = "${azurerm_kubernetes_cluster.aks.name}-clusteradmin"
}

resource "azuread_group" "aks-aad-users" {
  name = "${azurerm_kubernetes_cluster.aks.name}-users"
}


# Cluster role binding to AAD group

resource "kubernetes_cluster_role_binding" "aad_integration_group" {
  metadata {
    name = "${azurerm_kubernetes_cluster.aks.name}-admins"
  }
  role_ref {
    api_group = "rbac.authorization.k8s.io"
    kind      = "ClusterRole"
    name      = "cluster-admin"
  }
  subject {
    kind = "Group"
    name = azuread_group.aks-aad-clusteradmins.id
  }
  depends_on = [
    azurerm_kubernetes_cluster.aks
  ]
}


resource "kubernetes_cluster_role_binding" "aad_integration_user" {
  metadata {
    name = "${azurerm_kubernetes_cluster.aks.name}-users"
  }
  role_ref {
    api_group = "rbac.authorization.k8s.io"
    kind      = "ClusterRole"
    name      = "cluster-admin"
  }
  subject {
    kind = "User"
    name = "Olaf.Freund@outlook.com"
  }
  depends_on = [
    azurerm_kubernetes_cluster.aks
  ]
}